// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/repositories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_wiremock "github.com/wiremock/go-wiremock"
)

// MockWiremockClient is a mock of WiremockClient interface.
type MockWiremockClient struct {
	ctrl     *gomock.Controller
	recorder *MockWiremockClientMockRecorder
}

// MockWiremockClientMockRecorder is the mock recorder for MockWiremockClient.
type MockWiremockClientMockRecorder struct {
	mock *MockWiremockClient
}

// NewMockWiremockClient creates a new mock instance.
func NewMockWiremockClient(ctrl *gomock.Controller) *MockWiremockClient {
	mock := &MockWiremockClient{ctrl: ctrl}
	mock.recorder = &MockWiremockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWiremockClient) EXPECT() *MockWiremockClientMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockWiremockClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockWiremockClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockWiremockClient)(nil).Reset))
}

// StubFor mocks base method.
func (m *MockWiremockClient) StubFor(stub *go_wiremock.StubRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StubFor", stub)
	ret0, _ := ret[0].(error)
	return ret0
}

// StubFor indicates an expected call of StubFor.
func (mr *MockWiremockClientMockRecorder) StubFor(stub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StubFor", reflect.TypeOf((*MockWiremockClient)(nil).StubFor), stub)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClient) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), url)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(url, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(url, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), url, contentType, body)
}
